head(map)
all.equal(1,1,1)
all.equal(1,1,2)
?all.equal
nrow(map)==1==2
nrow(map)==1
isTRUE(c(1,1,1))
isTRUE(c(1,1,2))
?identitcal
?identical
?all.equal
source("/Users/lianlian/Dropbox/github/simuPoisson/R/simuPoisson.R")
simuPoisson(pargeno[,-1],chr=map$chr,cM=map$pos,N=5)
dim(map)
head(map)
simuPoisson(pargeno[,-1],chr=map$chr,cM=map$cM,N=5)
source("/Users/lianlian/Dropbox/github/simuPoisson/R/simuPoisson.R")
simuPoisson(pargeno[,-1],chr=map$chr,cM=map$cM,N=5)
class(pargeno[,-1])
class(pargeno[,2])
pargeno
paentsGeno=pargneo[,-1]
paentsGeno=pargeno[,-1]
parentsGeno=pargeno[,-1]
parentsGeno=apply(parentsGeno,2,as.numeric)
parentsGeno
source("/Users/lianlian/Dropbox/github/simuPoisson/R/simuPoisson.R")
parentsGeno
simuPoisson(pargeno[,-1],chr=map$chr,cM=map$cM,N=5)
simuPoisson(parentsGeno,chr=map$chr,cM=map$cM,N=5)
source("/Users/lianlian/Dropbox/github/simuPoisson/R/simuPoisson.R")
simuPoisson(parentsGeno,chr=map$chr,cM=map$cM,N=5)
geno1=simuPoisson(parentsGeno,chr=map$chr,cM=map$cM,N=5)
tcrossprod(geno1)
G=tcrossprod(geno1)
G=G/sum(diag(G))
G
cor(t(geno1))
geno1=apply(geon1-mean(geno1))
geno1=simuPoisson(parentsGeno,chr=map$chr,cM=map$cM,N=5)
geno1
set.seed(1)
geno1=simuPoisson(parentsGeno,chr=map$chr,cM=map$cM,N=5)
geno1
getwd()
save(geno1,"geno1.RData")
save(geno1,file="geno1.RData")
rm(list=ls())
library(simuPoisson)
set.seed(1);geno2=simuPoisson(parentsGeno,map,"F2",5)
data(pargeno)
data(fpgenomat)
data(map)
load("/Users/lianlian/Dropbox/github/simuPoisson/data/map.RData")
load("/Users/lianlian/Dropbox/github/simuPoisson/data/pargeno.RData")
set.seed(1);geno2=simuPoisson(pargeno[,-1],map,"F2",5)
parentsGeno=pargeno[,-1]
parentsGeno=apply(parentsGeno,2,as.numeric)
head(map)
colnames(map)=c("chr","SNPid","pos")
parentsGeno=apply(parentsGeno,2,as.numeric)
set.seed(1);geno2=simuPoisson(pargeno[,-1],map,"F2",5)
simuPisson
simuPoisson
samplegamete
head(map)
colnames(map)[2]="mkname"
head(map)
set.seed(1);geno2=simuPoisson(pargeno[,-1],map,"F2",5)
set.seed(1);geno2=simuPoisson(parentsGeno,map,"F2",5)
geno2
geno2=geno2[-c(1:4),-1]
geno2
load("geno1.RData")
all(geno1==geno2)
geno1
geno2
save(parentsGeno,file="~/Dropbox/github/simuPoisson/data/parentsGeno.RData")
load("/Users/lianlian/Dropbox/github/simuPoisson/data/map.RData")
head(map)
dim(map)
cor(t(geno1))
head(map)
source("https://github.com/lian0090/simuPoisson/blob/master/R/simuPoisson.R")
install_github("lian0090/simuPoisson")
library(simuPoisson)
data(geno)
data(parentsGeno)
data(map)
head(map)
head(parentsGeno)
library(simuPoisson)#
data(parentsGeno)#
data(map)#
#simulate 10 individuals#
progeny=simuPoisson(parentsGeno,map$chr,map$cM,10)
progeny
rm(list=ls())
library(simuPoisson)#
data(parentsGeno)#
data(map)
parentsGeno
parentsGeno2=parentsGeno+1
parentsGeno2
progeny=simuPoisson(parentsGeno,map$chr,map$cM,10)
progeny
progeny2=simuPoisson(parentsGeno2,map$chr,map$cM,10)
progeny2
set.seed(1);progeny2=simuPoisson(parentsGeno2,map$chr,map$cM,10)
set.seed(1);progeny=simuPoisson(parentsGeno,map$chr,map$cM,10)
all(progeny==progeny2-1)
library(SKAT2)
data(mouse)
n=500#
p=20 #work with a window of 20 markers#
pheno=mouse.pheno[1:n,]#
Z1=mouse.X[1:n,1:p]#
X=cbind(model.matrix(~pheno$GENDER)[,-1],pheno$CageDensity)#
X1=cbind(1,model.matrix(~pheno$GENDER)[,-1],pheno$CageDensity)#
y=pheno$Obesity.BMI#
##test the window of SNPs (Z1)#
out=testWindow(y,X=X1,Zt=Z1)#
out$p.SKAT$p.value#
[1] 0.6564919#
##test Z1, but account for genetic background#
G=tcrossprod(scale(mouse.X[1:n,],T,F))#
eigenG=getEigenZd(Kd=G)#
out=testWindow(y,X=X1,Zt=Z1,eigenG=eigenG)#
out$p.SKAT$p.value
dim(G)
G1=G[50:70,50:70]
eigenG1=eigenG$U1[50:70,] %*% diag(eigenG$d1) %*% t(eigenG$U1[50:70,])
eigenG1[1:10,1:10]
G1[1:10,1:10]
G12=G[3:10,6:10]
eigenG12=eigenG$U1[3:10,] %*% diag(eigenG$d1) %*% t(eigenG$U1[6:10,])
G12
eigenG12
source("/Users/lianlian/Dropbox/github/SKAT2/R/SKAT_General.R")
source("/Users/lianlian/Dropbox/github/SKAT2/R/singleSNP.R")
yNA=y
yNA[c(3:5,6:10)]=NA
out=testWindow(y,X=X1,Zt=Z1,eigenG=eigenG)
out$p.Score
out=testWindow(yNA,X=X1,Zt=Z1,eigenG=eigenG)
source("/Users/lianlian/Dropbox/github/SKAT2/R/SKAT_General.R")
out=testWindow(yNA,X=X1,Zt=Z1,eigenG=eigenG)
out$p.Score
a=c(matrix(4,4),matrix(4,4),matrix(3,3))
a
source("/Users/lianlian/Dropbox/github/SKAT2/R/SKAT_General.R")
out=testWindow(yNA,X=X1,Zt=Z1,eigenG=eigenG)
which(is.na(yNA))
out
source("/Users/lianlian/Dropbox/github/SKAT2/R/simuPower.R")
Var=P3D.NULL(y,X=X1,eigenG=eigenG)#
##p-vlaue for single SNP test while correction for multiple test by effective number of independent tests#
GWAS.P3D(y,X0=X1,Xt=Z1,Var,eigenG,multipleCorrection=T)
Var=P3D.NULL(y,X=X1,eigenG=eigenG)#
##p-vlaue for single SNP test while correction for multiple test by effective number of independent tests#
GWAS.P3D(yNA,X0=X1,Xt=Z1,Var,eigenG,multipleCorrection=T)
source("/Users/lianlian/Dropbox/github/SKAT2/R/singleSNP.R")
Var=P3D.NULL(y,X=X1,eigenG=eigenG)#
##p-vlaue for single SNP test while correction for multiple test by effective number of independent tests#
GWAS.P3D(yNA,X0=X1,Xt=Z1,Var,eigenG,multipleCorrection=T)
GWAS.P3D(y,X0=X1,Xt=Z1,Var,eigenG,multipleCorrection=F)
GWAS.P3D(yNA,X0=X1,Xt=Z1,Var,eigenG,multipleCorrection=F)
out=testWindow(y,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)
out
out=testWindow(yNA,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)
source("/Users/lianlian/Dropbox/github/SKAT2/R/SKAT_General.R")
out=testWindow(yNA,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)
source("/Users/lianlian/Dropbox/github/SKAT2/R/SKAT_General.R")
out=testWindow(yNA,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)
out
out$p.Score
out2=testWindow(y,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)
source("/Users/lianlian/Dropbox/github/SKAT2/R/SKAT_General.R")
out2=testWindow(y,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)
out2
out2$p.Score
out$p.Score
out2=testWindow(yNA,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)
out2$p.Score
n=500#
p=20 #work with a window of 20 markers#
pheno=mouse.pheno[1:n,]#
Z1=mouse.X[1:n,1:p]#
X=cbind(model.matrix(~pheno$GENDER)[,-1],pheno$CageDensity)#
X1=cbind(1,model.matrix(~pheno$GENDER)[,-1],pheno$CageDensity)#
y=pheno$Obesity.BMI
out=testWindow(y,X=X1,Zt=Z1)#
out$p.SKAT$p.value
out=testWindow(y,X=X1,Zt=Z1,eigenG=eigenG)
out
out=testWindow(y,X=X1,Zt=Z1,eigenG=eigenG,removeZtFromG=T)#
out$p.SKAT$p.value
Var=P3D.NULL(y,X=X1,eigenG=eigenG)
GWAS.P3D(y,X0=X1,Xt=Z1,Var,eigenG,multipleCorrection=T)
GWAS.P3D(y,X0=X1,Xt=Z1,Var,eigenG,multipleCorrection=F)
2^12/4
1024^3
2^20
2^10
install_github("GuantGen/BEDMatrix")
library(devtools)
install_github("GuantGen/BEDMatrix")
install_github("QuantGen/BEDMatrix")
library(BEDMatrix)
source("/Users/lianlian/Dropbox/github/SKAT2/R/simuPower.R")
q("no")
library(inline)
dummy<-cfunction(body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA))#
int nNA=length(R_whNA);#
UNPROTECT(1)#
rintf(":%d\n",whNA);}#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
int nNA=length(R_whNA);#
UNPROTECT(1);#
rintf(":%d\n",R_whNA);#
rintf(":%d\n",nNA);#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
int nNA=length(R_whNA);#
UNPROTECT(1);#
Rprintf(":%d\n",R_whNA);#
Rprintf(":%d\n",nNA);#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
int nNA=length(R_whNA);#
UNPROTECT(1);#
Rprintf("%d\n",R_whNA);#
Rprintf("%d\n",nNA);#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
int nNA=length(R_whNA);#
UNPROTECT(1);#
Rprintf("%d\n",nNA);#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
int nNA=length(R_whNA);#
UNPROTECT(1);#
return nNA;#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
*pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(1);#
#
return nNA;#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(1);#
#
return nNA;#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
#
return  R_nNA;#
')
whNA=which(is.na(c(1:10)))
whNA
dummy(whNA)
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
Rprintf("%d\n",nNA);#
return  R_nNA;#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\n",nNA);#
return  R_nNA;#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d",nNA);#
return  R_nNA;#
')
dummy(whNA)
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d",nNA);#
printf("\n");#
return  R_nNA;#
')
##inline package does not seem to support "\n" in printf#
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\\\n",nNA);#
return  R_nNA;#
')
dummy(whNA)
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
return  R_nNA;#
')
dummy(whNA)
a=dummy(whNA)
length(a)
class(a)
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int whNA=INTEGER(R_whNA);#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
printf("%d\\n",whNA[0])#
return  R_nNA;#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int *whNA=INTEGER(R_whNA);#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
printf("%d\\n",whNA[0])#
return  R_nNA;#
')
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int *whNA=INTEGER(R_whNA);#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
printf("%d\\n",whNA[0]);#
return  R_nNA;#
')
dummy(whNA)
##
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int *whNA=INTEGER(R_whNA);#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
printf("%d\\n",whNA[0]);#
printf(whNA==NULL);#
return  R_nNA;#
')
##inline package does not seem to support "\n" in printf, you need to use"\\n" to escape one \#
##
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int *whNA=INTEGER(R_whNA);#
int nNA=length(R_whNA);#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
printf("%d\\n",whNA[0]);#
printf("%d\\n",whNA==NULL);#
return  R_nNA;#
')
dummy(whNA)
log(1937258632)
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int *whNA=INTEGER(R_whNA);#
#
int nNA=length(R_whNA);#
int CwhNA[nNA];#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
printf("%d\\n",whNA[0]);#
printf("%d\\n",whNA==NULL);#
printf("%d\\n",CwhNA[0]);#
return  R_nNA;#
')
dummy(whNA)
##inline package does not seem to support "\n" in printf, you need to use"\\n" to escape one \#
#if whNA is interger(0),when it passed into C, it is not a NULL pointer, it points to a very large negative value#
dummy<-cfunction(c(R_whNA="integer"),body='#
PROTECT(R_whNA=AS_INTEGER(R_whNA));#
SEXP R_nNA = PROTECT(allocVector(INTSXP,1));#
int *whNA=INTEGER(R_whNA);#
#
int nNA=length(R_whNA);#
int CwhNA[nNA]; ##if nNA=0, CwhNA would be a NULL pointer#
int *pout=INTEGER(R_nNA);#
pout[0]=nNA;#
UNPROTECT(2);#
printf("%d\\n",nNA);#
printf("%d\\n",whNA[0]);#
printf("%d\\n",whNA==NULL);#
printf("%d\\n",CwhNA[0]);#
printf("%d\\n",CwhNA==NULL);#
return  R_nNA;#
')
load("/Users/lianlian/Dropbox/work/arvalisGxE/wheat/randomE0.2G0.2/seed3/GibbsV/Gibbs_samps.rda")
library(coda)
dim(Gibbs_samps[[1]])
dim(samps[[1]])
head(samps[[1]])
library(devtools)
install_github("lian0090/GibbsFW")
library(GibbsFW)
library(devtools)
install_github("lian0090/GibbsFW")
library(devtools)
library(GibbsFW)
FW()
FW
#but DIC is not a good indicator of prediction accuracy. it seesm that standardizing by saturated likelihood (when the variance unkown) helps.But we are not going to test this for now.
source("/Users/lianlian/Dropbox/github/FW/R/GibbsFW.R")
setwd("~/Dropbox/github/FW/src")#
dyn.load("C_GibbsFW.so")#
source("~/Dropbox/github/FW/R/GibbsFW.R")#
load("~/Dropbox/github/FW/data/wheat.rda")#
G=wheat.G50#
whNA=which(is.na(wheat.Y50$yNA))#
attach(wheat.Y50)#
gf3=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV,A=wheat.G50)
setwd("~/Dropbox/github/FW/src")#
library(GibbsFW)#
dyn.load("C_GibbsFW.so")#
source("~/Dropbox/github/FW/R/GibbsFW.R")#
load("~/Dropbox/github/FW/data/wheat.rda")#
G=wheat.G50#
whNA=which(is.na(wheat.Y50$yNA))#
attach(wheat.Y50)#
gf3=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV,A=wheat.G50)
source("/Users/lianlian/Dropbox/github/FW/R/GibbsFW.R")
setwd("~/Dropbox/github/FW/src")#
library(GibbsFW)#
dyn.load("C_GibbsFW.so")#
source("~/Dropbox/github/FW/R/GibbsFW.R")#
load("~/Dropbox/github/FW/data/wheat.rda")#
G=wheat.G50#
whNA=which(is.na(wheat.Y50$yNA))#
attach(wheat.Y50)#
gf3=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV,A=wheat.G50)
gf3$fit
source("/Users/lianlian/Dropbox/github/FW/R/GibbsFW.R")
gf3=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV,A=wheat.G50)
gf3$fit
gf2=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV)
fg2$fit
gf2$fit
gf2=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV)
gf2$fit
?rchisq
setwd("~/Dropbox/github/FW/src")#
library(GibbsFW)#
dyn.load("C_GibbsFW.so")#
source("~/Dropbox/github/FW/R/GibbsFW.R")#
load("~/Dropbox/github/FW/data/wheat.rda")#
G=wheat.G50#
whNA=which(is.na(wheat.Y50$yNA))#
attach(wheat.Y50)#
gf3=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV,A=wheat.G50)
source("/Users/lianlian/Dropbox/github/FW/R/GibbsFW.R")
setwd("~/Dropbox/github/FW/src")#
library(GibbsFW)#
dyn.load("C_GibbsFW.so")#
source("~/Dropbox/github/FW/R/GibbsFW.R")#
load("~/Dropbox/github/FW/data/wheat.rda")#
G=wheat.G50#
whNA=which(is.na(wheat.Y50$yNA))#
attach(wheat.Y50)#
gf3=GibbsFW(yNA,wheat.Y50$VAR,wheat.Y50$ENV,A=wheat.G50)
gf3
names(gf3)
library(devtools)
install_github("lian0090/FW")
q("no")
